#include <controller.h>

void readMacAddress()
{
    uint8_t baseMac[6];
    esp_err_t ret = esp_wifi_get_mac(WIFI_IF_STA, baseMac);
    if (ret == ESP_OK)
    {
        Serial.printf("%02x:%02x:%02x:%02x:%02x:%02x\n",
                      baseMac[0], baseMac[1], baseMac[2],
                      baseMac[3], baseMac[4], baseMac[5]);
    }
    else
    {
        Serial.println("Failed to read MAC address");
    }
}

void logData()
{
    // Log the controller data to serial
    Serial.println("Controller Data:");

    // Left shoulder
    Serial.println("LS (Left Shoulder):");
    Serial.printf("  A0: %u, A3: %u, PB10: %u, A4: %u, B13: %u, A5: %u\n",
                  controller.LS.A0, controller.LS.A3, controller.LS.PB10,
                  controller.LS.A4, controller.LS.B13, controller.LS.A5);

    // Left dpad
    Serial.println("LD (Left DPad):");
    Serial.printf("  B12: %u, A6: %u, B2: %u, A7: %u\n",
                  controller.LD.B12, controller.LD.A6, controller.LD.B2, controller.LD.A7);

    // Right shoulder
    Serial.println("RS (Right Shoulder):");
    Serial.printf("  C13: %u, A1: %u, A12: %u, B9: %u, PB11: %u, B8: %u\n",
                  controller.RS.C13, controller.RS.A1, controller.RS.A12,
                  controller.RS.B9, controller.RS.PB11, controller.RS.B8);

    // Right dpad
    Serial.println("RD (Right DPad):");
    Serial.printf("  B3: %u, B5: %u, A15: %u, B4: %u\n",
                  controller.RD.B3, controller.RD.B5, controller.RD.A15, controller.RD.B4);

    // Alternate button
    Serial.println("ALT (Alternate Button):");
    Serial.printf("  A2: %u, C15: %u, C14: %u\n",
                  controller.ALT.A2, controller.ALT.C15, controller.ALT.C14);

    // Joystick
    Serial.println("JOY (Joystick):");
    Serial.printf("  BTN: %u, VALUE[0]: %u, VALUE[1]: %u\n",
                  controller.JOY.BTN, controller.JOY.VALUE[0], controller.JOY.VALUE[1]);

    // Encoder
    Serial.println("ENC (Encoder):");
    Serial.printf("  BTN: %u, VALUE: %u\n",
                  controller.ENC.BTN, controller.ENC.VALUE);

    Serial.println();
}

// callback function that will be executed when data is received
void OnDataRecv(const uint8_t *mac, const uint8_t *incomingData, int len)
{
    memcpy(&controller, incomingData, sizeof(controller));
    logData();
}

void initController()
{
    // Set device as a Wi-Fi Station
    WiFi.mode(WIFI_STA);

    Serial.print("[DEFAULT] ESP32 Board MAC Address: ");
    readMacAddress();

    // Init ESP-NOW
    if (esp_now_init() != ESP_OK)
    {
        Serial.println("Error initializing ESP-NOW");
        return;
    }

    // Once ESPNow is successfully Init, we will register for recv CB to
    // get recv packer info
    esp_now_register_recv_cb(esp_now_recv_cb_t(OnDataRecv));
}